"use strict";
//@ts-nocheck
/**
* This file and any referenced files were automatically generated by @cosmology/telescope@1.8.3
* DO NOT MODIFY BY HAND. Instead, download the latest proto files for your chain
* and run the transpile command or npm scripts command that is used to regenerate this bundle.
*/
Object.defineProperty(exports, "__esModule", { value: true });
exports.useTendermintClient = exports.useRpcClient = exports.useRpcEndpoint = void 0;
const extern_1 = require("./extern");
const react_query_1 = require("@tanstack/react-query");
const tendermint_rpc_1 = require("@cosmjs/tendermint-rpc");
const useRpcEndpoint = ({ getter, options, }) => {
    return (0, react_query_1.useQuery)(['rpcEndpoint', getter], async () => {
        return await getter();
    }, options);
};
exports.useRpcEndpoint = useRpcEndpoint;
const useRpcClient = ({ rpcEndpoint, options, }) => {
    return (0, react_query_1.useQuery)(['rpcClient', rpcEndpoint], async () => {
        return await (0, extern_1.getRpcClient)(rpcEndpoint);
    }, options);
};
exports.useRpcClient = useRpcClient;
/**
 * Hook that uses react-query to cache a connected tendermint client.
 */
const useTendermintClient = ({ rpcEndpoint, options, }) => {
    const { data: client } = (0, react_query_1.useQuery)(['client', 'tendermint', rpcEndpoint], () => (0, tendermint_rpc_1.connectComet)(rpcEndpoint), {
        // allow overriding
        onError: (e) => {
            throw new Error(`Failed to connect to ${rpcEndpoint}` + '\n' + e);
        },
        ...options,
    });
    return { client };
};
exports.useTendermintClient = useTendermintClient;
