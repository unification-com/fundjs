syntax = "proto3";
package mainchain.wrkchain.v1;

import "cosmos/base/query/v1beta1/pagination.proto";
import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos_proto/cosmos.proto";
import "mainchain/wrkchain/v1/wrkchain.proto";

option go_package = "github.com/unification-com/mainchain/x/wrkchain/types";

// Query defines the gRPC querier service.
service Query {
  // Params queries the parameters of x/wrkchain module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/mainchain/wrkchain/v1/params";
  }

  // WrkChain queries the metadata of a wrkchain.
  rpc WrkChain(QueryWrkChainRequest) returns (QueryWrkChainResponse) {
    option (google.api.http).get = "/mainchain/wrkchain/v1/wrkchain/{wrkchain_id}";
  }

  // WrkChainBlock queries a submitted hash of a wrkchain
  rpc WrkChainBlock(QueryWrkChainBlockRequest) returns (QueryWrkChainBlockResponse) {
    option (google.api.http).get = "/mainchain/wrkchain/v1/wrkchain/{wrkchain_id}/block/{height}";
  }

  // WrkChainsFiltered queries all wrkchain metadata for given search parameters
  rpc WrkChainsFiltered(QueryWrkChainsFilteredRequest) returns (QueryWrkChainsFilteredResponse) {
    option (google.api.http).get = "/mainchain/wrkchain/v1/wrkchains";
  }

  // WrkChainStorage queries wrkchain storage for for given wrkchain ID
  rpc WrkChainStorage(QueryWrkChainStorageRequest) returns (QueryWrkChainStorageResponse) {
    option (google.api.http).get = "/mainchain/wrkchain/v1/wrkchain/{wrkchain_id}/storage";
  }
}

// QueryParamsRequest is the request type for the Query/Params RPC method
message QueryParamsRequest {}

// QueryParamsResponse is the response type for the Query/Params RPC method
message QueryParamsResponse {
  Params params = 1 [(gogoproto.nullable) = false];
}

// QueryWrkChainRequest is the request type for the Query/WrkChain RPC method
message QueryWrkChainRequest {
  // wrkchain_id is the id of the wrkchain to query for
  uint64 wrkchain_id = 1;
}

// QueryWrkChainResponse is the response type for the Query/WrkChain RPC method
message QueryWrkChainResponse {
  WrkChain wrkchain = 1;
}

// QueryWrkChainBlockRequest is the request type for the Query/WrkChainBlock RPC method
message QueryWrkChainBlockRequest {
  // wrkchain_id is the id of the wrkchain to query for
  uint64 wrkchain_id = 1;
  // height is the block number of the hash to query for
  uint64 height = 2;
}

// QueryWrkChainBlockResponse is the response type for the Query/WrkChainBlock RPC method
message QueryWrkChainBlockResponse {
  WrkChainBlock block = 1;
  uint64 wrkchain_id = 2;
  string owner = 3;
}

// QueryWrkChainsFilteredRequest is the request type for the Query/WrkChainsFiltered RPC method
message QueryWrkChainsFilteredRequest {
  option (gogoproto.equal)           = false;
  option (gogoproto.goproto_getters) = false;

  // moniker is the moniker of the wrkchain to search for
  string moniker = 1;
  // owner is an address to search for
  string owner = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // pagination defines an optional pagination for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 3;
}

// QueryWrkChainsFilteredResponse is the response type for the Query/WrkChainsFiltered RPC method
message QueryWrkChainsFilteredResponse {
  repeated WrkChain wrkchains = 1 [(gogoproto.nullable) = false];
  // pagination defines the pagination in the response.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryWrkChainStorageRequest is the request type for the Query/WrkChainStorage RPC method
message QueryWrkChainStorageRequest {
  // wrkchain_id is the id of the wrkchain to query for
  uint64 wrkchain_id = 1;
}

// QueryWrkChainStorageResponse is the response type for the Query/WrkChainStorage RPC method
message QueryWrkChainStorageResponse {
  uint64 wrkchain_id = 1;
  string owner = 2;

  // current_limit is the current in-state storage limit for this wrkchain
  uint64 current_limit = 3;

  // current_used is the number of in-state slots currently used
  uint64 current_used = 4;

  // max is the maximum possible slots a wrkchain can have, as defined by the wrkchain module params
  uint64 max = 5;

  // max_purchasable is the maximum number a wrkchain can purchase without exceeding max
  uint64 max_purchasable = 6;
}
